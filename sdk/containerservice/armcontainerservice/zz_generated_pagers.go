// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcontainerservice

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// AgentPoolListResultPager provides iteration over AgentPoolListResult pages.
type AgentPoolListResultPager interface {
	azcore.Pager

	// PageResponse returns the current AgentPoolListResultResponse.
	PageResponse() AgentPoolListResultResponse
}

type agentPoolListResultCreateRequest func(context.Context) (*azcore.Request, error)

type agentPoolListResultHandleError func(*azcore.Response) error

type agentPoolListResultHandleResponse func(*azcore.Response) (AgentPoolListResultResponse, error)

type agentPoolListResultAdvancePage func(context.Context, AgentPoolListResultResponse) (*azcore.Request, error)

type agentPoolListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester agentPoolListResultCreateRequest
	// callback for handling response errors
	errorer agentPoolListResultHandleError
	// callback for handling the HTTP response
	responder agentPoolListResultHandleResponse
	// callback for advancing to the next page
	advancer agentPoolListResultAdvancePage
	// contains the current response
	current AgentPoolListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *agentPoolListResultPager) Err() error {
	return p.err
}

func (p *agentPoolListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AgentPoolListResult.NextLink == nil || len(*p.current.AgentPoolListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *agentPoolListResultPager) PageResponse() AgentPoolListResultResponse {
	return p.current
}

// MaintenanceConfigurationListResultPager provides iteration over MaintenanceConfigurationListResult pages.
type MaintenanceConfigurationListResultPager interface {
	azcore.Pager

	// PageResponse returns the current MaintenanceConfigurationListResultResponse.
	PageResponse() MaintenanceConfigurationListResultResponse
}

type maintenanceConfigurationListResultCreateRequest func(context.Context) (*azcore.Request, error)

type maintenanceConfigurationListResultHandleError func(*azcore.Response) error

type maintenanceConfigurationListResultHandleResponse func(*azcore.Response) (MaintenanceConfigurationListResultResponse, error)

type maintenanceConfigurationListResultAdvancePage func(context.Context, MaintenanceConfigurationListResultResponse) (*azcore.Request, error)

type maintenanceConfigurationListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester maintenanceConfigurationListResultCreateRequest
	// callback for handling response errors
	errorer maintenanceConfigurationListResultHandleError
	// callback for handling the HTTP response
	responder maintenanceConfigurationListResultHandleResponse
	// callback for advancing to the next page
	advancer maintenanceConfigurationListResultAdvancePage
	// contains the current response
	current MaintenanceConfigurationListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *maintenanceConfigurationListResultPager) Err() error {
	return p.err
}

func (p *maintenanceConfigurationListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MaintenanceConfigurationListResult.NextLink == nil || len(*p.current.MaintenanceConfigurationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *maintenanceConfigurationListResultPager) PageResponse() MaintenanceConfigurationListResultResponse {
	return p.current
}

// ManagedClusterListResultPager provides iteration over ManagedClusterListResult pages.
type ManagedClusterListResultPager interface {
	azcore.Pager

	// PageResponse returns the current ManagedClusterListResultResponse.
	PageResponse() ManagedClusterListResultResponse
}

type managedClusterListResultCreateRequest func(context.Context) (*azcore.Request, error)

type managedClusterListResultHandleError func(*azcore.Response) error

type managedClusterListResultHandleResponse func(*azcore.Response) (ManagedClusterListResultResponse, error)

type managedClusterListResultAdvancePage func(context.Context, ManagedClusterListResultResponse) (*azcore.Request, error)

type managedClusterListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester managedClusterListResultCreateRequest
	// callback for handling response errors
	errorer managedClusterListResultHandleError
	// callback for handling the HTTP response
	responder managedClusterListResultHandleResponse
	// callback for advancing to the next page
	advancer managedClusterListResultAdvancePage
	// contains the current response
	current ManagedClusterListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *managedClusterListResultPager) Err() error {
	return p.err
}

func (p *managedClusterListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedClusterListResult.NextLink == nil || len(*p.current.ManagedClusterListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedClusterListResultPager) PageResponse() ManagedClusterListResultResponse {
	return p.current
}

// OutboundEnvironmentEndpointCollectionPager provides iteration over OutboundEnvironmentEndpointCollection pages.
type OutboundEnvironmentEndpointCollectionPager interface {
	azcore.Pager

	// PageResponse returns the current OutboundEnvironmentEndpointCollectionResponse.
	PageResponse() OutboundEnvironmentEndpointCollectionResponse
}

type outboundEnvironmentEndpointCollectionCreateRequest func(context.Context) (*azcore.Request, error)

type outboundEnvironmentEndpointCollectionHandleError func(*azcore.Response) error

type outboundEnvironmentEndpointCollectionHandleResponse func(*azcore.Response) (OutboundEnvironmentEndpointCollectionResponse, error)

type outboundEnvironmentEndpointCollectionAdvancePage func(context.Context, OutboundEnvironmentEndpointCollectionResponse) (*azcore.Request, error)

type outboundEnvironmentEndpointCollectionPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester outboundEnvironmentEndpointCollectionCreateRequest
	// callback for handling response errors
	errorer outboundEnvironmentEndpointCollectionHandleError
	// callback for handling the HTTP response
	responder outboundEnvironmentEndpointCollectionHandleResponse
	// callback for advancing to the next page
	advancer outboundEnvironmentEndpointCollectionAdvancePage
	// contains the current response
	current OutboundEnvironmentEndpointCollectionResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *outboundEnvironmentEndpointCollectionPager) Err() error {
	return p.err
}

func (p *outboundEnvironmentEndpointCollectionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OutboundEnvironmentEndpointCollection.NextLink == nil || len(*p.current.OutboundEnvironmentEndpointCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *outboundEnvironmentEndpointCollectionPager) PageResponse() OutboundEnvironmentEndpointCollectionResponse {
	return p.current
}

