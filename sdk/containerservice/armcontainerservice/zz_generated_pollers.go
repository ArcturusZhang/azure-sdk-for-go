// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcontainerservice

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// AgentPoolPoller provides polling facilities until the operation reaches a terminal state.
type AgentPoolPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final AgentPoolResponse will be returned.
	FinalResponse(ctx context.Context) (AgentPoolResponse, error)
}

type agentPoolPoller struct {
	pt *armcore.LROPoller
}

func (p *agentPoolPoller) Done() bool {
	return p.pt.Done()
}

func (p *agentPoolPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *agentPoolPoller) FinalResponse(ctx context.Context) (AgentPoolResponse, error) {
	respType := AgentPoolResponse{AgentPool: &AgentPool{}}
	resp, err := p.pt.FinalResponse(ctx, respType.AgentPool)
	if err != nil {
		return AgentPoolResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *agentPoolPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *agentPoolPoller) pollUntilDone(ctx context.Context, freq time.Duration) (AgentPoolResponse, error) {
	respType := AgentPoolResponse{AgentPool: &AgentPool{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.AgentPool)
	if err != nil {
		return AgentPoolResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// HTTPPoller provides polling facilities until the operation reaches a terminal state.
type HTTPPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final *http.Response will be returned.
	FinalResponse(ctx context.Context) (*http.Response, error)
}

type httpPoller struct {
	pt *armcore.LROPoller
}

func (p *httpPoller) Done() bool {
	return p.pt.Done()
}

func (p *httpPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *httpPoller) FinalResponse(ctx context.Context) (*http.Response, error) {
	return p.pt.FinalResponse(ctx, nil)
}

func (p *httpPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *httpPoller) pollUntilDone(ctx context.Context, freq time.Duration) (*http.Response, error) {
	return p.pt.PollUntilDone(ctx, freq, nil)
}

// ManagedClusterPoller provides polling facilities until the operation reaches a terminal state.
type ManagedClusterPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ManagedClusterResponse will be returned.
	FinalResponse(ctx context.Context) (ManagedClusterResponse, error)
}

type managedClusterPoller struct {
	pt *armcore.LROPoller
}

func (p *managedClusterPoller) Done() bool {
	return p.pt.Done()
}

func (p *managedClusterPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *managedClusterPoller) FinalResponse(ctx context.Context) (ManagedClusterResponse, error) {
	respType := ManagedClusterResponse{ManagedCluster: &ManagedCluster{}}
	resp, err := p.pt.FinalResponse(ctx, respType.ManagedCluster)
	if err != nil {
		return ManagedClusterResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *managedClusterPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *managedClusterPoller) pollUntilDone(ctx context.Context, freq time.Duration) (ManagedClusterResponse, error) {
	respType := ManagedClusterResponse{ManagedCluster: &ManagedCluster{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.ManagedCluster)
	if err != nil {
		return ManagedClusterResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// RunCommandResultPoller provides polling facilities until the operation reaches a terminal state.
type RunCommandResultPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final RunCommandResultResponse will be returned.
	FinalResponse(ctx context.Context) (RunCommandResultResponse, error)
}

type runCommandResultPoller struct {
	pt *armcore.LROPoller
}

func (p *runCommandResultPoller) Done() bool {
	return p.pt.Done()
}

func (p *runCommandResultPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *runCommandResultPoller) FinalResponse(ctx context.Context) (RunCommandResultResponse, error) {
	respType := RunCommandResultResponse{RunCommandResult: &RunCommandResult{}}
	resp, err := p.pt.FinalResponse(ctx, respType.RunCommandResult)
	if err != nil {
		return RunCommandResultResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *runCommandResultPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *runCommandResultPoller) pollUntilDone(ctx context.Context, freq time.Duration) (RunCommandResultResponse, error) {
	respType := RunCommandResultResponse{RunCommandResult: &RunCommandResult{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.RunCommandResult)
	if err != nil {
		return RunCommandResultResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

